#pragma once
#include "funclib"

#define NEUNET_FC_BEGIN namespace fc {
#define NEUNET_FC_END }

#define NEUNET_CONV_BEGIN namespace conv {
#define NEUNET_CONV_END }

#define FILTER_BLOCK_CNT(FILTER_DIR_CNT, DIR_DILATION) (uint64_t)((DIR_DILATION + 1) * FILTER_DIR_CNT - DIR_DILATION)
#define SAMP_TRACE_POS(OUTPUT_DIR_POS, FILTER_DIR_POS, DIR_STRIDE, DIR_DILATION) (uint64_t)(OUTPUT_DIR_POS * DIR_STRIDE + FILTER_DIR_POS * (1 + DIR_DILATION))
#define SAMP_OUTPUT_DIR_CNT(INPUT_DIR_CNT, FILTER_DIR_CNT, DIR_STRIDE, DIR_DILATION) (uint64_t)(INPUT_DIR_CNT - FILTER_BLOCK_CNT(FILTER_DIR_CNT, DIR_STRIDE) / DIR_DILATION + 1)
#define SAMP_INPUT_DIR_CNT(OUTPUT_DIR_CNT, FILTER_DIR_CNT, DIR_STRIDE, DIR_DILATION) (uint64_t)((OUTPUT_DIR_CNT - 1) * DIR_STRIDE + FILTER_BLOCK_CNT(FILTER_DIR_CNT, DIR_DILATION))
#define SAMP_VALID(INPUT_DIR_CNT, FILTER_DIR_CNT, DIR_STRIDE, DIR_DILATION) (uint64_t)((INPUT_DIR_CNT - FILTER_BLOCK_CNT(FILTER_DIR_CNT, DIR_DILATION)) % DIR_STRIDE == 0)

#define NEUNET_POOL_AVG 0
#define NEUNET_POOL_MAX 1
#define NEUNET_POOL_GAG 2

#include "fc.hpp"
#include "conv.hpp"